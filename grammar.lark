?start: top_body

top_body: body
fn_body: body

body: stmt*

?stmt: cmd
     | label
     | goto_stmt
     | function_stmt
     | if_stmt
     | if_else_stmt
     | while_stmt
     | do_while_stmt
     | for_stmt
     | break_stmt
     | continue_stmt
     | return_stmt
     | expr_stmt

?cmd: "\\print" expr ";"                           -> print_stmt
    | "\\about" ";"                                -> about_stmt
    | "\\set" IDENT "," expr ";"                   -> var_stmt
    | "\\py_call" IDENT "," string ("," expr)* ";" -> python_call_stmt
    | "\\py_exec" string ";"                       -> python_exec_stmt
    | "\\goto" IDENT ";"                           -> goto_stmt
    | "\\goto" IDENT _IF "(" expr ")" ";"          -> goto_if_stmt
    | "\\call" expr ("," expr)* ";"                -> call_stmt
    | "\\callsave" IDENT "," expr ("," expr)* ";"  -> call_and_save_stmt
    | "\\sleep" expr ";"                           -> sleep_stmt
    | "\\exit" expr? ";"                           -> exit_stmt
    | "\\input" IDENT ("," expr)? ";"              -> input_stmt
    | "\\nonlocal_set" IDENT "," expr ";"          -> nonlocal_var_stmt
    | "\\include" string ";"                       -> include_stmt

label: IDENT ":"

goto_stmt: _GOTO IDENT ";"

function_stmt: _FUNCTION IDENT "(" args ")" "{" fn_body "}"

return_stmt: _RETURN [expr] ";"

if_stmt: _IF "(" expr ")" "{" body "}"

if_else_stmt: _IF "(" expr ")" "{" body "}" _ELSE (if_else_stmt | if_stmt | "{" body "}")

while_stmt: _WHILE "(" expr ")" "{" body "}"

do_while_stmt: _DO "{" body "}" _WHILE "(" expr ")" ";"

for_stmt: _FOR "(" [exprs] ";" [expr] ";" [exprs] ")" "{" body "}"

break_stmt: _BREAK ";"
continue_stmt: _CONTINUE ";"

?expr_stmt: exprs ";"

?exprs: expr ("," expr)*

?expr: assign

?assign: assign_expr "=" assign
       | assign_expr "+=" assign   -> iadd
       | assign_expr "-=" assign   -> isub
       | assign_expr "*=" assign   -> imul
       | assign_expr "/=" assign   -> idiv
       | assign_expr "%=" assign   -> imod
       | assign_expr "%/%=" assign -> ifloordiv
       | cmp

?assign_expr: var
			| subscript

?cmp: sum "==" sum -> eq
    | sum "!=" sum -> ne
    | sum "<" sum  -> lt
    | sum "<=" sum -> le
    | sum ">" sum  -> gt
    | sum ">=" sum -> ge
    | sum

?sum: sum "+" prod -> add
    | sum "-" prod -> sub
    | prod

?prod: prod "*" prefix   -> mul
     | prod "/" prefix   -> div
     | prod "%/%" prefix -> floordiv
     | prod "%" prefix   -> mod
     | prefix

?prefix: "+" prefix -> pos
       | "-" prefix -> neg
       | postfix

?postfix: postfix "**" prefix                 -> pow
        | postfix "(" (expr ("," expr)*)? ")" -> call
		| subscript
        | atom
		
subscript: postfix "[" expr "]"

?atom: literal
     | var
     | "(" expr ")"
	 
var: IDENT

?literal: string
        | function
		| "[" (expr ("," expr)*)? "]"   -> list
		| "{" (pair ("," pair)*)? "}"   -> dict
        | INT                           -> int
        | FLOAT                         -> float
        | _TRUE                         -> true
        | _FALSE                        -> false
        | _NULL                         -> null

string: STRING_DQUOTE
      | STRING_SQUOTE
STRING_DQUOTE: "\"" _STRING_ESC_INNER "\""
STRING_SQUOTE: "'" _STRING_ESC_INNER "'"
_STRING_INNER: /.*?/
_STRING_ESC_INNER: _STRING_INNER /(?<!\\)(\\\\)*?/

function: _FUNCTION "(" args ")" "{" fn_body "}"
args: (IDENT ("," IDENT)*)?

pair: expr ":" expr

IDENT: /(?!/ RESERVED  /)/ CNAME

RESERVED: _TRUE | _FALSE | _NULL | _FUNCTION | _RETURN | _IF | _ELSE | _WHILE | _GOTO | _DO | _FOR | _BREAK | _CONTINUE
_TRUE: "True"
_FALSE: "False"
_NULL: "None"
_FUNCTION: "function"
_RETURN: "return"
_IF: "if"
_ELSE: "else"
_WHILE: "while"
_GOTO: "goto"
_DO: "do"
_FOR: "for"
_BREAK: "break"
_CONTINUE: "continue"

%import common.CNAME
%import common.ESCAPED_STRING
%import common.INT
%import common.FLOAT
%import common.SH_COMMENT
%import common.C_COMMENT
%import common.CPP_COMMENT
%import common.WS

%ignore SH_COMMENT
%ignore C_COMMENT
%ignore CPP_COMMENT
%ignore WS
