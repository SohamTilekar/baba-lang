top_body: _body

body: _body

_body: stmt*

?stmt: expr_stmt
     | if_stmt
     | if_else_stmt
     | while_stmt
     | do_while_stmt
     | for_stmt
     | break_stmt
     | continue_stmt
     | return_stmt
     | include_stmt
     | function_stmt

include_stmt: _INCLUDE string ";"

return_stmt: _RETURN [expr] ";"

if_stmt: _IF "(" expr ")" "{" body "}"

if_else_stmt: _IF "(" expr ")" "{" body "}" _ELSE (if_else_stmt | if_stmt | "{" body "}")

while_stmt: _WHILE "(" expr ")" "{" body "}"

do_while_stmt: _DO "{" body "}" _WHILE "(" expr ")" ";"

for_stmt: _FOR "(" [exprs] ";" [expr] ";" [exprs] ")" "{" body "}"

break_stmt: _BREAK ";"
continue_stmt: _CONTINUE ";"

function_stmt: _FUNCTION IDENT "(" form_args ")" "{" body "}"

?expr_stmt: exprs ";"

?exprs: _comma_list{expr}

?expr: assign

?assign: pattern "=" assign
       | pattern "+=" assign   -> iadd
       | pattern "-=" assign   -> isub
       | pattern "*=" assign   -> imul
       | pattern "/=" assign   -> idiv
       | pattern "%=" assign   -> imod
       | pattern "%/%=" assign -> ifloordiv
       | pattern "**=" assign  -> ipow
       | pattern "&=" assign   -> iand
       | pattern "|=" assign   -> ior
       | pattern "^=" assign   -> ixor
       | pattern "<<=" assign  -> ilshift
       | pattern ">>=" assign  -> irshift
       | cmp

?pattern: IDENT                -> var_pattern
        | postfix "[" expr "]" -> subscript_pattern

?cmp: bit_or "==" bit_or -> eq
    | bit_or "!=" bit_or -> ne
    | bit_or "<" bit_or  -> lt
    | bit_or "<=" bit_or -> le
    | bit_or ">" bit_or  -> gt
    | bit_or ">=" bit_or -> ge
    | bit_or

?bit_or: bit_or "|" bit_and -> bit_or
       | bit_or "^" bit_and -> bit_xor
       | bit_and

?bit_and: bit_and "&" shift -> bit_and
        | shift

?shift: shift "<<" sum  -> lshift
      | shift ">>" sum  -> rshift
      | sum

?sum: sum "+" prod -> add
    | sum "-" prod -> sub
    | prod

?prod: prod "*" prefix   -> mul
     | prod "/" prefix   -> div
     | prod "%/%" prefix -> floordiv
     | prod "%" prefix   -> mod
     | prefix

?prefix: "+" prefix -> pos
       | "-" prefix -> neg
       | "~" prefix -> bit_not
       | "!" prefix -> logical_not
       | postfix

?postfix: postfix "**" prefix       -> pow
        | postfix "(" spec_args ")" -> call
        | postfix "[" expr "]"      -> subscript
        | atom
spec_args: _comma_list{expr}?

?atom: literal
     | IDENT -> var
     | "(" expr ")"

?literal: string
        | function
        | "[" _comma_list{expr}? "]"    -> list_
        | "{" _comma_list{pair}? "}"    -> dict_
        | INT                           -> int
        | FLOAT                         -> float
        | _TRUE                         -> true
        | _FALSE                        -> false
        | _NULL                         -> null

string: STRING
STRING: STRING_DQUOTE
      | STRING_SQUOTE
STRING_DQUOTE: "\"" _STRING_ESC_INNER "\""
STRING_SQUOTE: "'" _STRING_ESC_INNER "'"
_STRING_INNER: /.*?/
_STRING_ESC_INNER: _STRING_INNER /(?<!\\)(\\\\)*?/

function: _FUNCTION "(" form_args ")" "{" body "}"
form_args: _comma_list{IDENT}?

pair: expr ":" expr

_comma_list{e}: e ("," e)*

IDENT: /(?!/ RESERVED  /)/ CNAME

RESERVED: _TRUE | _FALSE | _NULL | _FUNCTION | _RETURN | _IF | _ELSE | _WHILE | _DO | _FOR | _BREAK | _CONTINUE | _INCLUDE
_TRUE: "true"
_FALSE: "false"
_NULL: "null"
_FUNCTION: "function"
_RETURN: "return"
_IF: "if"
_ELSE: "else"
_WHILE: "while"
_DO: "do"
_FOR: "for"
_BREAK: "break"
_CONTINUE: "continue"
_INCLUDE: "\\include"

%import common.CNAME
%import common.INT
%import common.FLOAT
%import common.SH_COMMENT
%import common.C_COMMENT
%import common.CPP_COMMENT
%import common.WS

%ignore SH_COMMENT
%ignore C_COMMENT
%ignore CPP_COMMENT
%ignore WS
